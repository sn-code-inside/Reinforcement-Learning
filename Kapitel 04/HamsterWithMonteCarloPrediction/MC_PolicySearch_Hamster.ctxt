#BlueJ class context
comment0.target=MC_PolicySearch_Hamster
comment0.text=\r\n\ \ A\ hamster\ agent\ conducting\ a\ Monte\ Carlo\ policy\ search.\r\n\r\n\ Supplementary\ material\ to\ the\ book\:\ \r\n\ "Reinforcement\ Learning\ From\ Scratch\:\ Understanding\ Current\ Approaches\ -\ with\ Examples\ in\ Java\ and\ Greenfoot"\ by\ Uwe\ Lorenz.\r\n\ https\://link.springer.com/book/10.1007/978-3-031-09030-1\r\n\ \r\n\ Ausgabe\ auf\ Deutsch\:\ https\://link.springer.com/book/9783662683101\r\n\ \r\n\ Licensing\ CC-BY-SA\ 4.0\ \r\n\ Attribution\ -\ Sharing\ under\ the\ same\ conditions\r\n\ \r\n\ www.facebook.com/ReinforcementLearningJava\r\n\ github.com/sn-code-inside/Reinforcement-Learning\r\n\r\n\ www.x-ai.eu\r\n\ \r\n\ @author\ Uwe\ Lorenz\r\n\ @version\ 1.2\ (14.11.2023)\r\n
comment1.params=
comment1.target=MC_PolicySearch_Hamster()
comment10.params=s_key
comment10.target=java.lang.Double\ maxQ(java.lang.String)
comment10.text=\r\n\ Gets\ the\ greatest\ Q-value\ stored\ for\ the\ state\ s.\r\n\ @param\ s_key\ state\ key\r\n\ @return\ greatest\ Q-value\ stored\ for\ the\ state\ s.\ Null\ if\ state\ is\ unknown.\r\n
comment11.params=s_key\ a\ v
comment11.target=void\ setQ(java.lang.String,\ int,\ double)
comment11.text=\r\n\ Sets\ a\ Q-value\ for\ the\ state-action\ pair\ (s,a).\r\n\ @param\ s\ state\ key\r\n\ @param\ v\ Q-value\ of\ the\ state-action\ pair\ (s,a)\ to\ be\ set.\r\n
comment12.params=s_key\ a
comment12.target=double\ getQ(java.lang.String,\ int)
comment12.text=\r\n\ Gets\ the\ Q-value\ for\ the\ state-action\ pair\ (s,a).\r\n\ @param\ s_key\ state\ key\r\n\ @param\ a\ action\r\n\ @return\ Q-value\r\n
comment13.params=s_key
comment13.target=java.lang.Double[]\ getQValues(java.lang.String)
comment13.text=\r\n\ Gets\ all\ Q-Values\ at\ given\ state\ s.\r\n\ @param\ s_key\ state\ key\r\n\ @return\ Array\ with\ the\ Q\ action\ values.\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ This\ method\ is\ called\ once\ by\ Greenfoot\ as\ soon\ as\ the\ 'Act'\ button\ or\ repeatedly\ if\ the\ 'Run'\ button\ is\ clicked.\ \ \r\n
comment3.params=episode
comment3.target=void\ update(java.util.LinkedList)
comment3.text=\r\n\ Update\ der\ Policy\ mit\ einer\ episodischen\ Auswertung.\r\n\ @param\ episode\ Enth\u00E4lt\ die\ Folge\ von\ "Erfahrungen"\ der\ Episode\ jeweils\ bestehend\ aus\ Zustand,Aktion\ und\ Reward.\r\n
comment4.params=s_key
comment4.target=double[]\ P_Policy(java.lang.String)
comment4.text=\r\n\ Stochastic\ policy\ of\ the\ agent.\ In\ this\ case\ (MC\ policy-search)\ it\ just\ returns\ the\r\n\ current\ table\ entry\ pi(s).\r\n\ @param\ s_key\ state\ key\r\n\ @return\ probability\ distribution\ for\ actions\ a\ in\ [0,1,...,n-1].\r\n
comment5.params=s_key\ P
comment5.target=void\ setPi(java.lang.String,\ double[])
comment5.text=\r\n\ Assigns\ a\ probability\ distribution\ over\ the\ actions\ to\ a\ state.\r\n\ @param\ s_key\ state\ key\r\n\ @param\ P\ Probability\ distribution\ for\ the\ actions\ a\ from\ [0,1,...,size\ of\ actionspace-1].\r\n
comment6.params=s_key
comment6.target=double[]\ getPi(java.lang.String)
comment6.text=\r\n\ Returns\ the\ probability\ distribution\ over\ the\ actions\ saved\ for\ a\ state.\r\n\ @param\ s_key\ state\ key\r\n\ @param\ P\ Probability\ distribution\ for\ the\ actions\ a\ from\ [0,1,...,size\ of\ actionspace-1].\r\n
comment7.params=episode\ s\ a
comment7.target=boolean\ contains_sa(java.util.LinkedList,\ java.lang.String,\ int)
comment7.text=\r\n\ Tests\ if\ a\ state-action\ pair\ appears\ in\ an\ episode.\r\n\ @param\ episode\ List\ of\ "experiences"\:\ ...,(s,a,r),...\ \r\n\ @param\ s\ state\ key\r\n\ @return\ True,\ if\ (s,a)\ appears\ in\ an\ episode.\ False\ otherwise.\r\n
comment8.params=x\ y\ score
comment8.target=java.lang.String\ getStateKey(int,\ int,\ int)
comment8.text=\r\n\ Creates\ the\ key\ for\ accessing\ the\ tables\ of\ pi\ and\ Q.\ If\ the\ state\ is\ unknown\ for\ one\ of\ them,\r\n\ the\ corresponding\ record\ is\ created.\r\n\ @param\ x\ column\ in\ the\ gridworld\r\n\ @param\ y\ row\ in\ the\ gridworld\r\n\ @param\ score\ collected\ grains\r\n\ @return\ state\ key\r\n
comment9.params=s_key
comment9.target=java.lang.Integer\ getActionWithMaxQ(java.lang.String)
comment9.text=\r\n\ Gets\ the\ action\ with\ the\ largest\ Q\ value\ for\ a\ given\ state.\ If\ there\ are\ several\ Q_max\ actions\r\n\ with\ the\ same\ value,\ they\ are\ selected\ randomly.\ If\ there\ are\ no\ Q-values,\ then\ -1\ is\ returned.\r\n\ @param\ s_key\ state\ key\r\n\ @return\ Action\ with\ greatest\ Q-value\ stored\ for\ the\ state\ s.\ Null\ if\ state\ is\ unknown.\r\n
numComments=14
