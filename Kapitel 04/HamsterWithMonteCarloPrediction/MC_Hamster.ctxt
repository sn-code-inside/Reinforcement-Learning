#BlueJ class context
comment0.target=MC_Hamster
comment0.text=\r\n\ A\ "Monte\ Carlo"\ hamster\ agent\ that\ evaluates\ the\ results\ of\ entire\ episodes\ for\ the\ state\ valuation.\r\n\r\n\ Supplementary\ material\ to\ the\ book\:\ \r\n\ "Reinforcement\ Learning\ From\ Scratch\:\ Understanding\ Current\ Approaches\ -\ with\ Examples\ in\ Java\ and\ Greenfoot"\ by\ Uwe\ Lorenz.\r\n\ https\://link.springer.com/book/10.1007/978-3-031-09030-1\r\n\ \r\n\ Ausgabe\ auf\ Deutsch\:\ https\://link.springer.com/book/9783662683101\r\n\ \r\n\ Licensing\ CC-BY-SA\ 4.0\ \r\n\ Attribution\ -\ Sharing\ under\ the\ same\ conditions\r\n\ \r\n\ www.facebook.com/ReinforcementLearningJava\r\n\ github.com/sn-code-inside/Reinforcement-Learning\r\n\r\n\ www.x-ai.eu\r\n\ \r\n\ @author\ Uwe\ Lorenz\r\n\ @version\ 1.2\ (14.11.2023)\r\n
comment1.params=
comment1.target=MC_Hamster()
comment10.params=episode\ s_key
comment10.target=boolean\ contains_s(java.util.LinkedList,\ java.lang.String)
comment10.text=\r\n\ Tests\ if\ a\ state\ has\ been\ visited\ in\ an\ episode.\r\n\ @param\ episode\ List\ of\ "experiences"\:\ ...,(s,a,r),...\ \r\n\ @param\ s\ state\ key\r\n\ @return\ True,\ if\ the\ state\ s\ appears\ in\ an\ episode.\ False\ otherwise.\r\n
comment11.params=sucessorStates
comment11.target=double\ weightedValuation(java.util.ArrayList)
comment11.text=\r\n\ Sum\ over\ P(s'|s,a)*V(s')\ ,for\ all\ s'\ of\ S\ [for\ which\ P(s')>0],\ i.e.\ add\ up\ probability*value\ for\ each\ subsequent\ state.\r\n\ @param\ sucessorStates\ List\ of\ possible\ subsequent\ states\ with\ their\ probabilities.\r\n\ @return\ Weighted\ evaluation\ sum\ of\ the\ possible\ subsequent\ states\ of\ an\ action.\r\n
comment12.params=s_key
comment12.target=Actionvalue\ targetOrientedValuation(java.lang.String)
comment12.text=\r\n\ Calculates\ the\ value\ of\ a\ state\ from\ the\ best\ possible\ subsequent\ state\ distribution.\ "maxQ"\r\n\ @param\ s\ state\ key\r\n\ @return\ valuation\ of\ an\ action\r\n
comment13.params=
comment13.target=void\ clearV()
comment13.text=\r\n\ Resets\ all\ state\ values\ to\ 0.\r\n
comment14.params=x\ y
comment14.target=java.lang.Double\ getV(int,\ int)
comment14.text=\r\n\ Gets\ value\ for\ state\ s.\ If\ there\ is\ no\ corresponding\ record\ in\ the\ HashMap,\ one\ will\ be\ created.\r\n\ @param\ x\ X-component\ of\ the\ state\ (column).\r\n\ @param\ y\ Y-component\ of\ the\ state\ (row).\r\n\ @return\ value\ for\ state\ s.\r\n
comment15.params=s_key
comment15.target=java.lang.Double\ getV(java.lang.String)
comment15.text=\r\n\ Gets\ value\ for\ state\ s.\r\n\ @param\ s\ state\ key\r\n\ @return\ value\ for\ state\ s.\r\n
comment16.params=s_key\ v
comment16.target=void\ setV(java.lang.String,\ double)
comment16.text=\r\n\ Sets\ a\ value\ for\ state\ s.\r\n\ @param\ s\ state\ key\r\n\ @param\ v\ Evaluation\ of\ the\ state\r\n
comment2.params=world
comment2.target=void\ addedToWorld(greenfoot.World)
comment3.params=s_key
comment3.target=double[]\ P_Policy(java.lang.String)
comment3.text=\r\n\ Stochastic\ policy\ of\ the\ agent.\ Assigns\ a\ probability\ distribution\ to\ a\ state\ over\ the\ set\ of\ possible\ actions.\r\n\ @param\ s_key\ state\ key\r\n\ @return\ probability\ distribution\ for\ actions\ a\ in\ [0,1,...,n-1].\r\n
comment4.params=n\ A_s\ s_key
comment4.target=double[]\ P_Policy(int,\ java.util.List,\ java.lang.String)
comment4.text=\r\n\ Assigns\ a\ probability\ distribution\ to\ a\ state\ over\ the\ set\ of\ possible\ actions\r\n\ according\ to\ epsilon-greedy\ action\ selection\ strategy.\r\n\ @param\ n\ number\ of\ sucessor\ states\r\n\ @param\ A_s\ List\ of\ action\ options\ available\ to\ the\ agent\ at\ the\ given\ time\ in\ s.\r\n\ @param\ s_key\ key\ for\ given\ state\ s\r\n\ @return\ probability\ distribution\ for\ actions\ a\ in\ [0,1,...,n-1].\r\n
comment5.params=
comment5.target=void\ act()
comment5.text=\r\n\ This\ method\ is\ called\ once\ by\ Greenfoot\ as\ soon\ as\ the\ 'Act'\ button\ or\ repeatedly\ if\ the\ 'Run'\ button\ is\ clicked.\ \ \r\n
comment6.params=episode
comment6.target=void\ update(java.util.LinkedList)
comment6.text=\r\n\ Update\ of\ the\ V(s)\ by\ evaluating\ a\ complete\ episode\ ("Monte\ Carlo"\ approach).\r\n\ @param\ episode\ Contains\ the\ sequence\ of\ experiences\ each\ consisting\ of\ state,action\ and\ reward.\r\n
comment7.params=
comment7.target=void\ startNewEpisode()
comment7.text=\r\n\ A\ new\ episode\ is\ started,\ i.e.\ logging,\ counter\ updates\ or\ reset\ and\ set\ agent\ to\ start\ position.\r\n\ Perform\ an\ evaluation\ period\ if\ necessary.\r\n
comment8.params=
comment8.target=java.lang.String\ getState()
comment9.params=x\ y\ score
comment9.target=java.lang.String\ getStateKey(int,\ int,\ int)
comment9.text=\r\n\ Creates\ the\ key\ for\ accessing\ the\ table\ of\ V(s).\ If\ it\ does\ not\ exist,\ the\ corresponding\ record\ is\ created.\r\n\ @param\ x\ column\ in\ the\ gridworld\r\n\ @param\ y\ row\ in\ the\ gridworld\r\n\ @param\ score\ collected\ grains\r\n\ @return\ state\ key\r\n
numComments=17
