#BlueJ class context
comment0.target=TicTacToe_Env
comment0.text=\r\n\ An\ environment\ for\ agents\ playing\ TicTacToe.\ \r\n\ \r\n\ Supplementary\ material\ to\ the\ book\:\ \r\n\ "Reinforcement\ Learning\ From\ Scratch\:\ Understanding\ Current\ Approaches\ -\ with\ Examples\ in\ Java\ and\ Greenfoot"\ by\ Uwe\ Lorenz.\r\n\ https\://link.springer.com/book/10.1007/978-3-031-09030-1\r\n\ \r\n\ Ausgabe\ auf\ Deutsch\:\ https\://link.springer.com/book/9783662683101\r\n\ \r\n\ Licensing\ CC-BY-SA\ 4.0\ \r\n\ Attribution\ -\ Sharing\ under\ the\ same\ conditions\r\n\ \r\n\ www.facebook.com/ReinforcementLearningJava\r\n\ github.com/sn-code-inside/Reinforcement-Learning\r\n\r\n\ www.x-ai.eu\r\n\ \r\n\ @author\ Uwe\ Lorenz\r\n\ @version\ 1.2\ (14.11.2023)\r\n
comment1.params=
comment1.target=TicTacToe_Env()
comment10.params=tttBoard
comment10.target=char\ checkMatrixWon(char[])
comment11.params=tttBoard
comment11.target=int\ countOpenFields(char[])
comment12.params=matrix\ i
comment12.target=char\ checkMatrixLine(char[],\ int)
comment13.params=sfmatrix
comment13.target=java.lang.String\ matrixToString(char[])
comment14.params=c
comment14.target=int\ playerNum(char)
comment2.params=player\ ident
comment2.target=TicTacToe_Agent\ produceAgent(char,\ java.lang.String)
comment2.text=\r\n\ Generates\ a\ TicTacToe\ agent.\r\n\ available\ algorithms\:\r\n\ "MCTS",\ "Monte-Carlo\ Rollout",\ "Q-Learning",\ "NegaMax",\ "Arbitrary"\ \r\n\ \r\n\ @param\ player\ Symbol\ of\ the\ player\r\n\ @param\ ident\ Name\ of\ the\ algorithm\ used\ \ \r\n
comment3.params=
comment3.target=void\ prepare()
comment3.text=\r\n\ Prepares\ the\ playing\ field.\r\n
comment4.params=games\ paramMin\ paramMax\ stepSize\ countedPlayer
comment4.target=void\ initCompareJfxLogger(int,\ int,\ int,\ int,\ char)
comment4.text=\r\n\ This\ initializes\ the\ data\ logger\ depending\ on\ selected\ agent\ class.\r\n\ @param\ games\ Number\ of\ games\ that\ the\ agents\ play\ against\ each\ other\ per\ parameterstep.\r\n\ @param\ parameterMin\ Start\ of\ the\ parameter\ test\ interval\ (e.g.\ rollouts)\r\n\ @param\ parameterMax\ End\ of\ the\ parameter\ test\ interval\ (e.g.\ rollouts)\r\n\ @param\ parameterStep\ Step\ size\ of\ the\ parameter\ test.\r\n\ @param\ countedPlayer\ Player\ whose\ results\ are\ counted.\r\n
comment5.params=
comment5.target=void\ act()
comment6.params=games\ parameterMin\ parameterMax\ parameterStep\ countedPlayer
comment6.target=void\ agentComparison(int,\ int,\ int,\ int,\ char)
comment6.text=\r\n\ Function\ with\ which\ one\ can\ let\ agents\ compete\ against\ each\ other\ and\ evaluate\ the\ results,\ iterates\ a\ \r\n\ parameter\ if\ necessary.\r\n\ @param\ games\ Number\ of\ games\ that\ the\ agents\ play\ against\ each\ other\ per\ parameterstep.\r\n\ @param\ parameterMin\ Start\ of\ the\ parameter\ test\ interval\ (e.g.\ rollouts)\r\n\ @param\ parameterMax\ End\ of\ the\ parameter\ test\ interval\ (e.g.\ rollouts)\r\n\ @param\ parameterStep\ Step\ size\ of\ the\ parameter\ test.\r\n\ @param\ countedPlayer\ Player\ whose\ results\ are\ counted.\r\n
comment7.params=numGames\ countedPlayer\ startState
comment7.target=double\ averageReward(int,\ int,\ char[])
comment7.text=\r\n\ Helper\ function\ that\ runs\ a\ specified\ number\ of\ AI\ games\ and\ determines\ the\ average\ reward\ for\ the\ specified\ player.\r\n\ @param\ numGames\ Number\ of\ test\ games\r\n\ @param\ countedPlayer\ Player\ whose\ results\ are\ counted.\r\n\ @param\ startState\ Starting\ position\ on\ the\ board\r\n\ @return\ The\ average\ reward\ for\ the\ specified\ player.\r\n
comment8.params=numGames\ countedPlayer\ startState
comment8.target=int\ comparisonWonLost(int,\ int,\ char[])
comment8.text=\r\n\ Helperfunction\ that\ runs\ a\ specified\ number\ of\ AI\ games\ and\ counts\ the\ games\ won\ for\ the\ specified\ player.\r\n\ @param\ numGames\ \ -\ Number\ of\ test\ games\r\n\ @param\ countedPlayer\ -\ Spieler,\ f\u00FCr\ den\ die\ Anzahl\ der\ Gewinne\ gez\u00E4hlt\ werden\ soll.\r\n\ @param\ startState\ Ausgangsstellung\ auf\ dem\ Brett\r\n\ @return\ number\ of\ games\ won\ by\ the\ counted\ player.\r\n
comment9.params=a\ c
comment9.target=boolean\ move(int,\ char)
comment9.text=\r\n\ Performs\ move\ a\ for\ player\ c.\r\n\ @param\ a\ action\r\n\ @param\ c\ Symbol\ of\ the\ player.\r\n\ @return\ true\ if\ move\ execution\ was\ successful,\ false\ otherwise.\r\n
numComments=15
