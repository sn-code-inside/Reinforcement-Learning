#BlueJ class context
comment0.target=QLearning
comment0.text=\r\n\ Q-Learning\ TicTacToe\ agent\ in\ Greenfoot.\r\n\r\n\ Supplementary\ material\ to\ the\ book\:\ \r\n\ "Reinforcement\ Learning\ From\ Scratch\:\ Understanding\ Current\ Approaches\ -\ with\ Examples\ in\ Java\ and\ Greenfoot"\ by\ Uwe\ Lorenz.\r\n\ https\://link.springer.com/book/10.1007/978-3-031-09030-1\r\n\ \r\n\ Ausgabe\ auf\ Deutsch\:\ https\://link.springer.com/book/9783662683101\r\n\ \r\n\ Licensing\ CC-BY-SA\ 4.0\ \r\n\ Attribution\ -\ Sharing\ under\ the\ same\ conditions\r\n\ \r\n\ www.facebook.com/ReinforcementLearningJava\r\n\ github.com/sn-code-inside/Reinforcement-Learning\r\n\r\n\ www.x-ai.eu\r\n\ \r\n\ @author\ Uwe\ Lorenz\r\n\ @version\ 1.2\ (14.11.2023)\r\n
comment1.params=player\ env\ ident
comment1.target=QLearning(char,\ TicTacToe_Env,\ java.lang.String)
comment1.text=\r\n\ Produces\ a\ TicTacToe\ agent\ with\ Q-Learning\ and\ runs\ a\ training\ session.\r\n\ @param\ player\ Zeichen\ des\ Spielers\ f\u00FCr\ den\ der\ Agente\ erzeugt\ wird.\r\n\ @param\ env\ TicTacToe-Umgebung\r\n\ @param\ ident\ Bezeichnung\ des\ Algorithmsu\r\n
comment10.params=reward\ currentPlayer
comment10.target=void\ updateCounter(double,\ char)
comment10.text=\r\n\ Helper\ function\ for\ updating\ the\ statistical\ result\ counters.\r\n\ @param\ reward\ Reward\r\n\ @param\ currentPlayer\ player\r\n
comment11.params=testphase
comment11.target=java.lang.String\ counterToString(boolean)
comment11.text=\r\n\ Converts\ the\ counters\ into\ a\ string\ for\ console\ output.\r\n\ @param\ testphase\ switch\ for\ evaluation\ phases\r\n\ @return\ a\ string\ for\ console\ output\ of\ the\ statistical\ counters\r\n
comment12.params=
comment12.target=void\ resultCounterReset()
comment12.text=\r\n\ Reset\ the\ counters\ for\ the\ exercise\ statistics.\r\n
comment13.params=board\ player
comment13.target=int\ calculateStateKey(char[],\ char)
comment13.text=\r\n\ Converts\ a\ game\ state\ into\ an\ integer\ number.\ Each\ field\ is\ interpreted\ as\ a\ digit\ in\ the\ ternary\ system\ (base\ 3).\r\n\ @param\ board\ board\ state\r\n\ @param\ player\ player\ associated\r\n\ @return\ state\ key\r\n
comment14.params=z
comment14.target=char[]\ calculateBoardFromStateKey(int)
comment14.text=\r\n\ Converts\ an\ integer\ state\ key\ into\ a\ game\ array.\ The\ key\ is\ interpreted\ as\ a\ nine-digit\r\n\ number\ in\ the\ ternary\ system\ with\ the\ three\ digit\ values\ 'x','o','-'.\r\n\ @param\ z\ state\ key\r\n\ @return\ board\ state\ char\ array\r\n
comment2.params=s_key\ a\ reward\ new_s_key\ end
comment2.target=void\ update(int,\ int,\ double,\ int,\ boolean)
comment2.text=\r\n\ Update\ of\ Q(s,a)\ \ ("Q-learning"\ approach)\r\n\ @param\ s_key\ state\ key\r\n\ @param\ a\ action\r\n\ @param\ reward\ Reward\r\n\ @param\ new_s_key\ Successor\ state\r\n\ @param\ end\ Has\ a\ terminal\ state\ or\ the\ step\ limit\ been\ reached?\r\n
comment3.params=board\ player
comment3.target=int\ getState(char[],\ char)
comment3.text=\r\n\ Creates\ the\ key\ for\ accessing\ the\ Q-table.\ If\ it\ does\ not\ exist,\ then\ the\ corresponding\ \r\n\ record\ is\ created.\r\n\ @param\ board\ board\ state\r\n\ @param\ player\ Sign\ of\ the\ player\ in\ question\r\n\ @return\ Key\ for\ the\ given\ state\r\n
comment4.params=board
comment4.target=int\ policy(char[])
comment5.params=board\ player
comment5.target=int\ policy(char[],\ char)
comment5.text=\r\n\ Epsilon-Greedy\ Policy.\r\n\ @param\ s_key\ state\ key\r\n\ @param\r\n
comment6.params=stateKey
comment6.target=int\ getActionWithMaxQ(int)
comment6.text=\r\n\ Fetches\ the\ action\ with\ the\ largest\ Q\ value\ for\ a\ given\ state.\ If\ there\r\n\ are\ several\ equal\ valued\ Q_max\ actions,\ then\ is\ randomly\ selected.\ If\ \r\n\ all\ Q-values\ are\ 0,\ then\ -1\ is\ returned.\r\n\ @param\ stateKey\ state\ key\r\n\ @return\ Action\ with\ the\ highest\ Q\ value.\r\n
comment7.params=s
comment7.target=java.lang.Double\ maxQ(int)
comment7.text=\r\n\ Get\ the\ largest\ Q\ value\ for\ a\ given\ state.\ If\ no\ entry\ exists,\ then\ return\ zero.\r\n\ @param\ s\ state\ key\r\n\ @return\ Largest\ Q\ value\ present.\r\n
comment8.params=s\ a\ v
comment8.target=void\ setQ(int,\ int,\ java.lang.Double)
comment8.text=\r\n\ Sets\ a\ Q-value\ for\ a\ specific\ state-action\ pair.\r\n\ @param\ s\ state\ key\r\n\ @param\ a\ action\r\n\ @param\ v\ Q-value\r\n
comment9.params=s\ a
comment9.target=double\ getQ(int,\ int)
comment9.text=\r\n\ Gets\ the\ Q\ value\ of\ a\ given\ state\ action\ pair.\r\n\ @param\ s\ state\ key\r\n\ @param\ a\ action\r\n\ @return\ Q-value\r\n
numComments=15
