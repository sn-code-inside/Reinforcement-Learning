#BlueJ class context
comment0.target=GenePool
comment0.text=\r\n\ GeneticAlgorithm\r\n\ @author\ Hai\ Nguyen\ Ho\r\n\ @version\ 18\ Nov\ 2016\r\n\ \r\n\ https\://www.codeproject.com/Articles/1160551/Self-Driven-Car-Simulator-Using-a-Neural-Network-a\r\n\ https\://github.com/nguyen124/AutoDrivingCarUsingNeuronNetwork\r\n\ \r\n\ adapted\ by\ Uwe\ Lorenz\ in\ 2021\r\n
comment1.params=env
comment1.target=GenePool(Evolutionary_PolicySearch_Environment)
comment10.params=gen1\ gen2
comment10.target=Genome[]\ mix_it(Genome,\ Genome)
comment10.text=\r\n\ Mix\ policy\ of\ gen1\ with\ gen2.\r\n\ @param\ gen1\ represents\ a\ policy\ table\r\n\ @param\ gen2\ represents\ a\ policy\ table\r\n\ @return\ children\ two\ complementary\ genomes\ that\ represents\ the\ mixed\ policy\ tables\ \r\n
comment11.params=genome
comment11.target=Genome\ clone_mutate(Genome)
comment11.text=\r\n\ Generates\ a\ mutated\ clone.\r\n\ @param\ genome\ Genome\ to\ be\ mutated.\r\n\ @param\ mutated\ clone\r\n
comment12.params=n
comment12.target=java.util.ArrayList\ getBestGenomes(int)
comment12.text=\r\n\ Get\ the\ best\ n\ genomes.\r\n\ @param\ n\ size\ of\ the\ top\ group\r\n\ @return\ List\ with\ the\ best\ n\ genomes.\r\n
comment13.params=
comment13.target=java.util.ArrayList\ getTopGroup()
comment13.text=\r\n\ Returns\ the\ currrent\ list\ of\ the\ best\ genomes.\r\n
comment14.params=all\ used
comment14.target=Genome\ getBestNotIn(java.util.ArrayList,\ java.util.ArrayList)
comment14.text=\r\n\ Find\ the\ best\ case\ based\ on\ fitness\ score,\ that\ is\ not\ in\ the\ given\ list\ "used".\r\n\ @param\ all\ the\ complete\ pool.\r\n\ @param\ used\ The\ method\ will\ return\ the\ genome\ with\ the\ highest\ fitness,\ that\ is\ not\ in\ the\ list\ "used".\r\n\ @return\ genome\ with\ the\ highest\ fitness,\ that\ is\ not\ in\ the\ given\ list.\r\n
comment15.params=
comment15.target=int\ getGeneration()
comment15.text=\r\n\ Returns\ the\ value\ of\ the\ generation\ counter.\r\n\ @return\ value\ of\ the\ generation\ counter\r\n
comment16.params=gl
comment16.target=java.lang.String\ genomeListToString(java.util.ArrayList)
comment16.text=\ \ \ public\ String\ genePoolToString(){\r\n\ \ \ \ \ \ \ \ String\ ret\ \=\ "";\r\n\ \ \ \ \ \ \ \ ret+\=genomeListToString(genePool);\r\n\ \ \ \ \ \ \ \ ret+\="\\nThe\ best\ 4\\n";\r\n\ \ \ \ \ \ \ \ ArrayList\ <Genome>\ best4\ \=\ getBestGenomes(4);\r\n\ \ \ \ \ \ \ \ ret+\=genomeListToString(best4);\r\n\ \ \ \ \ \ \ \ return\ ret;\r\n\ \ \ \ }\r\n
comment2.params=populationSize
comment2.target=java.util.HashMap\ generatePool(int)
comment2.text=\r\n\ Generate\ a\ new\ random\ pool.\r\n\ @param\ populationSize\ \ size\ of\ the\ gene\ pool\r\n
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Returns\ the\ size\ of\ the\ gene\ pool.\r\n\ @return\ size\r\n
comment4.params=
comment4.target=java.util.ArrayList\ getListOfGenomes()
comment4.text=\r\n\ Returns\ a\ list\ of\ the\ genomes\ that\ are\ stored\ in\ the\ pool.\r\n\ @return\ list\ of\ the\ genomes\ of\ the\ pool\r\n
comment5.params=ID\ fitness
comment5.target=void\ setFitness(int,\ double)
comment5.text=\r\n\ Sets\ a\ fitness\ value\ to\ a\ genome.\r\n\ @param\ ID\ ident\ code\ of\ the\ genome\r\n\ @param\ fitness\ fitness\ value\r\n
comment6.params=gene
comment6.target=void\ put(Genome)
comment6.text=\r\n\ Puts\ a\ genome\ into\ the\ gene\ pool.\ If\ there\ is\ a\ genome\ with\ the\ same\ ID,\r\n\ it\ will\ be\ overwritten.\r\n\ @param\ gene\ the\ genome\ to\ be\ written\ into\ the\ gene\ pool.\r\n\ \r\n
comment7.params=ID
comment7.target=Genome\ get(java.lang.Integer)
comment7.text=\r\n\ Gets\ a\ genome\ from\ the\ gene\ pool\ by\ ID\ code.\r\n\ @param\ ID\ The\ id\ of\ the\ related\ genome.\r\n
comment8.params=
comment8.target=void\ clearPool()
comment8.text=\r\n\ Clears\ the\ gene\ pool\ (removes\ all\ objects).\r\n
comment9.params=
comment9.target=double\ breedNextGeneration()
comment9.text=\r\n\ This\ function\ will\ generate\ new\ population\ of\ genomes\ based\ on\ best\r\n\ genomes\ (genomes\ which\ have\ highest\ fitness).\ \r\n
numComments=17
