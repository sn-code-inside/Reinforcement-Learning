#BlueJ class context
comment0.target=NeuralNetwork
comment0.text=\r\n\ A\ fully\ connected\ Neural\ Network\ (Multilayer\ Perceptron).\ Contains\ a\ method\ to\ produce\ a\ GreenfootImage\ visualization.\r\n\ \r\n\ Supplementary\ material\ to\ the\ book\:\ \r\n\ "Reinforcement\ Learning\ From\ Scratch\:\ Understanding\ Current\ Approaches\ -\ with\ Examples\ in\ Java\ and\ Greenfoot"\ by\ Uwe\ Lorenz.\r\n\ https\://link.springer.com/book/10.1007/978-3-031-09030-1\r\n\ \r\n\ Ausgabe\ auf\ Deutsch\:\ https\://link.springer.com/book/9783662683101\r\n\ \r\n\ Licensing\ CC-BY-SA\ 4.0\ \r\n\ Attribution\ -\ Sharing\ under\ the\ same\ conditions\r\n\ \r\n\ www.facebook.com/ReinforcementLearningJava\r\n\ github.com/sn-code-inside/Reinforcement-Learning\r\n\r\n\ www.x-ai.eu\r\n\ \r\n\ @author\ Uwe\ Lorenz\r\n\ @version\ 1.2\ (14.11.2023)\r\n
comment1.params=size_of_network_layers
comment1.target=NeuralNetwork(int[])
comment10.params=
comment10.target=int\ getNumberOfWeights()
comment10.text=\ \r\n\ Gets\ the\ number\ of\ weights\ from\ the\ existing\ weight\ matrices.\r\n
comment11.params=size_of_network_layers
comment11.target=int\ calcNumberOfWeights(int[])
comment11.text=\r\n\ Calculates\ the\ number\ of\ weights\ from\ the\ given\ layer\ sizes\ (fully\ connected).\r\n\ @param\ size_of_network_layers\ Array\ containing\ the\ size\ of\ the\ layers\ of\ th\ neural\ network.\ The\ first\ layer\ 0\ is\ the\ input\ layer\ and\ \r\n\ \ \ \ \ \ \ \ the\ last\ one\ istthe\ output\ layer.\r\n
comment12.params=w
comment12.target=double\ getAbsMatrixMax(double[][])
comment12.text=\r\n\ Gets\ the\ nominal\ maximum\ value\ in\ a\ matrix\ (for\ normalization).\r\n
comment13.params=li
comment13.target=int\ getIListMaxAbs(java.util.ArrayList)
comment14.params=i
comment14.target=int\ iabs(int)
comment15.params=width\ height\ disp_activations
comment15.target=greenfoot.GreenfootImage\ produceVisualizationImage(int,\ int,\ boolean)
comment15.text=\r\n\ Produces\ a\ Greenfoot\ image\ of\ the\ network.\r\n\ @param\ width\r\n\ @param\ height\r\n\ @param\ disp_activations\ Set\ true\ to\ display\ neuron\ activations\ live\ (see\ GlassPane).\r\n
comment16.params=
comment16.target=java.util.ArrayList\ getNeuronDiameters()
comment16.text=\r\n\ @return\ list\ with\ the\ netinputs\ of\ the\ neurons.\r\n
comment17.params=img\ x0\ y0\ x1\ y1\ thickness
comment17.target=void\ drawThickLine(greenfoot.GreenfootImage,\ int,\ int,\ int,\ int,\ int)
comment17.text=\r\n\ Draws\ a\ line\ into\ the\ greenfoot\ image\ with\ the\ given\ thickness.\r\n
comment18.params=
comment18.target=java.lang.String\ toString()
comment2.params=x
comment2.target=void\ setInput(double[])
comment2.text=\ \r\n\ Set\ a\ new\ input\ vector\ to\ the\ neural\ network.\r\n\ @param\ x\ inputs\ \r\n
comment3.params=
comment3.target=double[]\ getOutput()
comment3.text=\r\n\ Calcualtes\ and\ gets\ the\ current\ network\ output.\r\n\ @return\ output\ vector\ of\ the\ network\r\n
comment4.params=x
comment4.target=double\ activation_function(double)
comment4.text=\r\n\ Defines\ the\ used\ activation\ function.\r\n\ @param\ x\ net\ input\ of\ the\ neuron\ (net_j)\r\n\ @return\ activation\r\n
comment5.params=
comment5.target=double[]\ calculate()
comment5.text=\r\n\ Calculates\ the\ output\ of\ the\ network.\r\n\ @return\ activations\ of\ the\ output\ neurons\r\n
comment6.params=activation
comment6.target=int\ visCalcDiameter(double)
comment6.text=\ \r\n\ Calculates\ the\ diameter\ of\ a\ neuron\ in\ the\ image\ from\ activation\ value.\r\n
comment7.params=inputs
comment7.target=double[]\ addBiasToLayerInput(double[])
comment7.text=\r\n\ The\ method\ is\ neccesary\ in\ this\ program,\ because\ we\ need\ an\ input[0]\ fixed\ with\ 1.0\ (bias).\r\n\ @param\ inputs\ array\ containing\ the\ input\ variables\r\n\ @\r\n
comment8.params=genome
comment8.target=void\ createWeightsFromGenome(Genome)
comment8.text=\r\n\ The\ neural\ network\ receives\ weights\ from\ the\ genome.\ That's\ why\ no\ learning\ rule\ like\ \r\n\ backpropagation\ is\ needed\ here.\r\n
comment9.params=
comment9.target=java.util.ArrayList\ getNeuronXY()
numComments=19
