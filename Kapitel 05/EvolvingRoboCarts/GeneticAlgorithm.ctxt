#BlueJ class context
comment0.target=GeneticAlgorithm
comment0.text=\r\n\ GeneticAlgorithm\ is\ used\ to\ train\ neuron\ network.\ It\ has\ a\ list\ of\ \r\n\ genomes\ called\ population.\ Each\ population\ will\ have\ some\ of\ the\ best\ genomes\r\n\ with\ highest\ fitness.\ Fitness\ is\ the\ sum\ of\ distance\ that\ how\ far\ a\ car\ could\ go.\ \r\n\ The\ best\ genomes\ will\ be\ used\ to\ create\ other\ genomes\ by\ mixing\ them\ up\ (crossing\ over\ \r\n\ between\ 2\ genomes)\ and\ mutate\ some\ of\ their\ genes.\ It\ is\ a\ little\ bit\ different\ with\ basic\ \r\n\ genetic\ algorithm,\ the\ mutate\ will\ not\ turn\ on\ and\ off\ a\ gene\ but\ they\ randomly\ change\ the\ weight\ of\ genes.\r\n\ \r\n\ @author\ Hai\ Nguyen\ Ho\r\n\ @version\ 18\ Nov\ 2016\r\n\ \r\n\ Licence\:\ The\ Code\ Project\ Open\ License\ (CPOL)\ 1.02\r\n\r\n\ https\://www.codeproject.com/Articles/1160551/Self-Driven-Car-Simulator-Using-a-Neural-Network-a\r\n\ https\://github.com/nguyen124/AutoDrivingCarUsingNeuronNetwork\r\n\ \r\n
comment1.params=
comment1.target=GeneticAlgorithm()
comment10.params=genome
comment10.target=void\ mutate(Genome)
comment10.text=\r\n\ Generate\ a\ random\ chance\ of\ mutating\ the\ weight\ in\ the\ genome.\r\n\ @param\ genome\ Genome\ to\ be\ mutated.\r\n
comment11.params=totalGenomes
comment11.target=java.util.ArrayList\ getBestGenomes(int)
comment11.text=\r\n\ Get\ the\ best\ genomes\ to\ breed\ new\ population\r\n\ @param\ totalGenomes\ size\ of\ the\ top\ group\r\n
comment12.params=used
comment12.target=Genome\ getBestNotIn(java.util.ArrayList)
comment12.text=\r\n\ Find\ the\ best\ case\ based\ on\ fitness\ score,\ that\ is\ not\ in\ the\ given\ list\ "used".\r\n\ @param\ upperBound\ The\ method\ will\ return\ genome\ with\ the\ highest\ fitness,\ that\ is\ not\ in\ the\ list\ "used".\r\n\ @return\ genome\ with\ the\ highest\ fitness,\ that\ is\ not\ in\ the\ given\ list.\r\n
comment13.params=
comment13.target=int\ getCurrentGeneration()
comment14.params=
comment14.target=java.lang.String\ genePoolToString()
comment15.params=gl
comment15.target=java.lang.String\ genomeListToString(java.util.ArrayList)
comment2.params=totalPop\ totalWeights
comment2.target=void\ generateNewGenePool(int,\ int)
comment2.text=\r\n\ Generate\ genomes\ population\ with\ ID,\ fitness\ and\ random\ Sigmoid\ weights\r\n
comment3.params=genomes
comment3.target=void\ setGenePool(java.util.ArrayList)
comment4.params=
comment4.target=java.util.ArrayList\ getGenePool()
comment5.params=fitness\ index
comment5.target=void\ setGenomeFitness(double,\ int)
comment6.params=
comment6.target=void\ clearGenePool()
comment7.params=
comment7.target=void\ breedPopulation()
comment7.text=\r\n\ This\ function\ will\ generate\ new\ population\ of\ genomes\ based\ on\ best\ 4\r\n\ genomes\ (genomes\ which\ have\ highest\ fitness).\ The\ best\ genomes\ will\ be\r\n\ mixed\ up\ and\ mutated\ to\ create\ new\ genomes.\r\n
comment8.params=totalWeights
comment8.target=Genome\ createNewGenome(int)
comment9.params=g1\ g2
comment9.target=java.util.ArrayList\ crossOver(Genome,\ Genome)
comment9.text=\r\n\ This\ function\ will\ mix\ up\ two\ genomes\ to\ create\ 2\ other\ new\ genomes\r\n
numComments=16
